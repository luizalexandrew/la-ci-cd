# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [main, develop]

permissions:
  issues: write  # Permissão para criar issues
  pull-requests: write  # Permissão para interagir com PRs

jobs:
  deploy_staging:
    runs-on: ubuntu-latest
    steps:
      - name: Gerar versão baseada na data, hora e minuto
        id: version
        run: |
          VERSION=$(date +'%Y%m%d%H%M')  # Exemplo: 202503171230
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "${VERSION}" > version.txt

      - name: Upload version as artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

      # - name: Wait for approval
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ secrets.GITHUB_TOKEN }}
      #     approvers: luizalexandrew
      #     minimum-approvals: 1
      #     timeout-minutes: 10
      #     issue-title: "Deploying version ${{ env.VERSION }} to prod"
      #     issue-body: "Please approve or deny the deployment of ${{ env.VERSION }}"


  test-ci:
    runs-on: ubuntu-20.04
    needs: [deploy_staging]
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run test
    
  deploy-production:
    needs: [test-ci]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    concurrency: deploy-to-production
    environment: production
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 10.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
      # - name: Wait for approval
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ secrets.GITHUB_TOKEN }}
      #     approvers: luizalexandrew
      #     minimum-approvals: 1
      #     timeout-minutes: 10
      # - name: Gerar versão baseada na data, hora e minuto
      #   id: version
      #   run: |
      #     VERSION=$(date +'%Y%m%d%H%M')  # Exemplo: 202503171230
      #     echo "VERSION=${VERSION}" >> $GITHUB_ENV
      # Baixar o artifact com a versão
      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version

      # Ler a versão do arquivo baixado
      - name: Read version from artifact
        run: |
          VERSION=$(cat version.txt)
          echo "Using version ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - run: docker build -t setup-nodejs .
      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker images
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          push: true
          tags: |
            luizalexandrew/la-ci-cd:latest
            luizalexandrew/la-ci-cd:${{ env.VERSION }}

  update-rancher-fleet:
    needs: deploy-production
    # needs: [test-ci]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Baixar o artifact com a versão gerada
      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version

      - name: Show Current Directory
        run: cd /
      - name: List Files
        run: ls -la

      # Atualizar o arquivo YAML do Fleet com a versão
      - name: Atualizar versão da imagem no arquivo YAML do Fleet
        run: |
          VERSION=$(cat version.txt)
          echo "Using version ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Atualizando a versão da imagem no Fleet para ${VERSION}"
          sed -i -E "s|(image: luizalexandrew/la-ci-cd:)[^ ]*|\1${VERSION}|g" ${{ github.workspace }}/infra/deployment.yaml

      - name: List Folders in Repository
        run: ls -d */  # Lists only directories

      - name: echo ${{ github.workspace }}
        run: echo ${{ github.workspace }}  # Lists only directories

      # # Commit e push da alteração para o repositório de destino
      # - name: Commit e push para o repositório de destino
      #   run: |
      #     git config user.name "GitHub Actions"
      #     git config user.email "actions@github.com"
      #     git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/luizalexandrew/la-ci-cd.git
      #     git add ${{ github.workspace }}/infra/deployment.yaml
      #     git commit -m "Atualizar versão da imagem do Fleet para ${VERSION}"
      #     git push


      - uses: actions/checkout@master
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0             # otherwise, you will fail to push refs to dest repo
      - name: Create local changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/luizalexandrew/la-ci-cd.git
          git add ${{ github.workspace }}/infra/deployment.yaml
          git commit -m "Atualizar versão da imagem do Fleet para ${VERSION}"
      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

